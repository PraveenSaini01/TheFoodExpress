{"ast":null,"code":"// // restaurant.service.ts\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { HttpClient } from '@angular/common/http';\n// import { Restaurant } from 'src/model/restaurant';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class RestaurantService {\n//   getAllRestaurants() {\n//     throw new Error('Method not implemented.');\n//   }\n//   apiUrl = 'http://localhost:9000/api/v3';\n//   constructor(private http: HttpClient) {}\n//   getRestaurants(): Observable<Array<Restaurant>> {\n//     return this.http.get<Array<Restaurant>>(this.apiUrl);\n//   }\n//   getRestaurant(restaurantId?: string): Observable<Restaurant> {\n//     return this.http.get<Restaurant>(`${this.apiUrl}/restaurant${restaurantId}`);\n//   }\n//   getFoodsForRestaurantId(restaurantId: string): Observable<Restaurant['foods']> {\n//     return this.http.get<Restaurant['foods']>(`${this.apiUrl}/${restaurantId}/foods`);\n//   }\n// }\nimport { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:9000/api/v3/restaurant';\n    this.updated = new EventEmitter();\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    const errorMessage = error.error instanceof ErrorEvent ? `Client-side error: ${error.error.message}` : `Server-side error: ${error.status} - ${error.message}`;\n    return throwError(errorMessage);\n  }\n  // registerRestaurant(restaurant: any): Observable<any> {\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   return this.http.post(`${this.apiUrl}/restaurant/register`, restaurant, { headers })\n  //     .pipe(\n  //       catchError(this.handleError)\n  //     );\n  // }\n  registerRestaurant(restaurant) {\n    let httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n    });\n    console.log(localStorage.getItem(\"Token\"));\n    let requestOption = {\n      headers: httpHeader\n    };\n    return this.http.post(`${this.apiUrl}/register`, restaurant, requestOption);\n  }\n  getAllRestaurants() {\n    console.log(\"in restaurant service\");\n    return this.http.get(`${this.apiUrl}/restaurant`).pipe(catchError(this.handleError));\n  }\n  getRestaurant(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}`);\n  }\n  getFoodsForRestaurantId(restaurantId) {\n    return this.http.get(`${this.apiUrl}/${restaurantId}/foods`);\n  }\n  getAllFoodMenu(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}/foodmenu`).pipe(catchError(this.handleError));\n  }\n  getFoodMenuById(itemId) {\n    return this.http.get(`${this.apiUrl}/foodmenu/${itemId}`).pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function RestaurantService_Factory(t) {\n    return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestaurantService,\n    factory: RestaurantService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EventEmitter","HttpHeaders","throwError","catchError","RestaurantService","constructor","http","apiUrl","updated","handleError","error","console","errorMessage","ErrorEvent","message","status","registerRestaurant","restaurant","httpHeader","localStorage","getItem","log","requestOption","headers","post","getAllRestaurants","get","pipe","getRestaurant","restaurantId","getFoodsForRestaurantId","getAllFoodMenu","getFoodMenuById","itemId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\SE91S9\\TheFoodExpress\\TheFoodExpress_new\\TheFoodExpress\\src\\app\\service\\restaurant.service.ts"],"sourcesContent":["// // restaurant.service.ts\n\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { HttpClient } from '@angular/common/http';\n// import { Restaurant } from 'src/model/restaurant';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class RestaurantService {\n//   getAllRestaurants() {\n//     throw new Error('Method not implemented.');\n//   }\n//   apiUrl = 'http://localhost:9000/api/v3';\n\n//   constructor(private http: HttpClient) {}\n\n//   getRestaurants(): Observable<Array<Restaurant>> {\n//     return this.http.get<Array<Restaurant>>(this.apiUrl);\n//   }\n\n//   getRestaurant(restaurantId?: string): Observable<Restaurant> {\n//     return this.http.get<Restaurant>(`${this.apiUrl}/restaurant${restaurantId}`);\n//   }\n\n//   getFoodsForRestaurantId(restaurantId: string): Observable<Restaurant['foods']> {\n//     return this.http.get<Restaurant['foods']>(`${this.apiUrl}/${restaurantId}/foods`);\n//   }\n// }\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, pipe, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Restaurant } from '../model/restaurant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n  private apiUrl = 'http://localhost:9000/api/v3/restaurant';\n  updated:EventEmitter<boolean>=new EventEmitter();\n  constructor(private http: HttpClient) { }\n\n  private handleError(error: any): Observable<never> {\n    console.error('An error occurred:', error);\n    const errorMessage = error.error instanceof ErrorEvent ?\n      `Client-side error: ${error.error.message}` :\n      `Server-side error: ${error.status} - ${error.message}`;\n    return throwError(errorMessage);\n  }\n\n  // registerRestaurant(restaurant: any): Observable<any> {\n  //   const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n  //   return this.http.post(`${this.apiUrl}/restaurant/register`, restaurant, { headers })\n  //     .pipe(\n  //       catchError(this.handleError)\n  //     );\n  // }\n  registerRestaurant(restaurant: any) {\n    let httpHeader = new HttpHeaders({\n      'Authorization':'Bearer ' +localStorage.getItem(\"token\")\n    });\n    console.log(localStorage.getItem(\"Token\"));\n    let requestOption = {headers:httpHeader}\n    return this.http.post(`${this.apiUrl}/register`,restaurant,requestOption);\n  }\n\n  getAllRestaurants(): Observable<Array<Restaurant>> {\n    console.log(\"in restaurant service\")\n    return this.http.get<Array<Restaurant>>(`${this.apiUrl}/restaurant`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getRestaurant(restaurantId?: string): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/restaurant/${restaurantId}`);\n  }\n\n  getFoodsForRestaurantId(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/${restaurantId}/foods`);\n  }\n\n  getAllFoodMenu(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/restaurant/${restaurantId}/foodmenu`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getFoodMenuById(itemId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/foodmenu/${itemId}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n}\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAoB,eAAe;AACxD,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAA2BC,UAAU,QAAQ,MAAM;AACnD,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,yCAAyC;IAC1D,KAAAC,OAAO,GAAuB,IAAIR,YAAY,EAAE;EACR;EAEhCS,WAAWA,CAACC,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAME,YAAY,GAAGF,KAAK,CAACA,KAAK,YAAYG,UAAU,GACpD,sBAAsBH,KAAK,CAACA,KAAK,CAACI,OAAO,EAAE,GAC3C,sBAAsBJ,KAAK,CAACK,MAAM,MAAML,KAAK,CAACI,OAAO,EAAE;IACzD,OAAOZ,UAAU,CAACU,YAAY,CAAC;EACjC;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACAI,kBAAkBA,CAACC,UAAe;IAChC,IAAIC,UAAU,GAAG,IAAIjB,WAAW,CAAC;MAC/B,eAAe,EAAC,SAAS,GAAEkB,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD,CAAC;IACFT,OAAO,CAACU,GAAG,CAACF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1C,IAAIE,aAAa,GAAG;MAACC,OAAO,EAACL;IAAU,CAAC;IACxC,OAAO,IAAI,CAACZ,IAAI,CAACkB,IAAI,CAAC,GAAG,IAAI,CAACjB,MAAM,WAAW,EAACU,UAAU,EAACK,aAAa,CAAC;EAC3E;EAEAG,iBAAiBA,CAAA;IACfd,OAAO,CAACU,GAAG,CAAC,uBAAuB,CAAC;IACpC,OAAO,IAAI,CAACf,IAAI,CAACoB,GAAG,CAAoB,GAAG,IAAI,CAACnB,MAAM,aAAa,CAAC,CACjEoB,IAAI,CACHxB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAC7B;EACL;EAEAmB,aAAaA,CAACC,YAAqB;IACjC,OAAO,IAAI,CAACvB,IAAI,CAACoB,GAAG,CAAM,GAAG,IAAI,CAACnB,MAAM,eAAesB,YAAY,EAAE,CAAC;EACxE;EAEAC,uBAAuBA,CAACD,YAAoB;IAC1C,OAAO,IAAI,CAACvB,IAAI,CAACoB,GAAG,CAAQ,GAAG,IAAI,CAACnB,MAAM,IAAIsB,YAAY,QAAQ,CAAC;EACrE;EAEAE,cAAcA,CAACF,YAAoB;IACjC,OAAO,IAAI,CAACvB,IAAI,CAACoB,GAAG,CAAQ,GAAG,IAAI,CAACnB,MAAM,eAAesB,YAAY,WAAW,CAAC,CAC9EF,IAAI,CACHxB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAC7B;EACL;EAEAuB,eAAeA,CAACC,MAAc;IAC5B,OAAO,IAAI,CAAC3B,IAAI,CAACoB,GAAG,CAAQ,GAAG,IAAI,CAACnB,MAAM,aAAa0B,MAAM,EAAE,CAAC,CAC7DN,IAAI,CACHxB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAC7B;EACL;EAAC,QAAAyB,CAAA,G;qBAzDU9B,iBAAiB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBnC,iBAAiB;IAAAoC,OAAA,EAAjBpC,iBAAiB,CAAAqC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}