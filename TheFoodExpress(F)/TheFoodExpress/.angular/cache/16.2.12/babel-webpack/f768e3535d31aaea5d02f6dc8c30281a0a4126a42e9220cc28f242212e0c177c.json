{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:9000/api/v3';\n    this.updated = new EventEmitter();\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    const errorMessage = error.error instanceof ErrorEvent ? `Client-side error: ${error.error.message}` : `Server-side error: ${error.status} - ${error.message}`;\n    return throwError(errorMessage);\n  }\n  registerRestaurant(restaurant) {\n    console.log(restaurant);\n    let httpHeader = new HttpHeaders({\n      'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n    });\n    console.log(localStorage.getItem(\"token\"));\n    let requestOption = {\n      headers: httpHeader\n    };\n    return this.http.post(`${this.apiUrl}/restaurant/register`, restaurant, requestOption);\n  }\n  registerFoodMenuItem(foodMenuItem) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n      })\n    };\n    return this.http.post(`${this.apiUrl}/foodMenu/register`, foodMenuItem, httpOptions).pipe(catchError(this.handleError));\n  }\n  getAllRestaurants() {\n    console.log(\"in restaurant service\");\n    return this.http.get(`${this.apiUrl}/restaurant`).pipe(catchError(this.handleError));\n  }\n  getRestaurant(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}`);\n  }\n  getAllFoodMenu(restaurantId) {\n    return this.http.get(`${this.apiUrl}/${restaurantId}/foodMenu`);\n  }\n  getFoodListForRestaurant(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}/foodMenu`).pipe(catchError(this.handleError));\n  }\n  getFoodMenuById(itemId) {\n    return this.http.get(`${this.apiUrl}/foodMenu/${itemId}`).pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function RestaurantService_Factory(t) {\n    return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestaurantService,\n    factory: RestaurantService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EventEmitter","HttpHeaders","throwError","catchError","RestaurantService","constructor","http","apiUrl","updated","handleError","error","console","errorMessage","ErrorEvent","message","status","registerRestaurant","restaurant","log","httpHeader","localStorage","getItem","requestOption","headers","post","registerFoodMenuItem","foodMenuItem","httpOptions","pipe","getAllRestaurants","get","getRestaurant","restaurantId","getAllFoodMenu","getFoodListForRestaurant","getFoodMenuById","itemId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\service\\restaurant.service.ts"],"sourcesContent":["\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, pipe, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Restaurant } from '../model/restaurant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n  private apiUrl = 'http://localhost:9000/api/v3';\n  updated:EventEmitter<boolean>=new EventEmitter();\n  constructor(private http: HttpClient) { }\n\n  private handleError(error: any): Observable<never> {\n    console.error('An error occurred:', error);\n    const errorMessage = error.error instanceof ErrorEvent ?\n      `Client-side error: ${error.error.message}` :\n      `Server-side error: ${error.status} - ${error.message}`;\n    return throwError(errorMessage);\n  }\n\n\n  registerRestaurant(restaurant: any) {\n    console.log(restaurant)\n    let httpHeader = new HttpHeaders({\n      'Authorization':'Bearer ' +localStorage.getItem(\"token\")\n    });\n    console.log(localStorage.getItem(\"token\"));\n    let requestOption = {headers:httpHeader}\n    return this.http.post(`${this.apiUrl}/restaurant/register`,restaurant,requestOption);\n  }\n\n  registerFoodMenuItem(foodMenuItem: any): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n      })\n    };\n    return this.http.post(`${this.apiUrl}/foodMenu/register`, foodMenuItem, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n\n\n\n\n\n  getAllRestaurants(): Observable<Array<Restaurant>> {\n    console.log(\"in restaurant service\")\n    return this.http.get<Array<Restaurant>>(`${this.apiUrl}/restaurant`)\n\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getRestaurant(restaurantId?: string): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/restaurant/${restaurantId}`);\n  }\n\n  getAllFoodMenu(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/${restaurantId}/foodMenu`);\n  }\n\n  getFoodListForRestaurant(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/restaurant/${restaurantId}/foodMenu`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getFoodMenuById(itemId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/foodMenu/${itemId}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAoB,eAAe;AACxD,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAA2BC,UAAU,QAAQ,MAAM;AACnD,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,8BAA8B;IAC/C,KAAAC,OAAO,GAAuB,IAAIR,YAAY,EAAE;EACR;EAEhCS,WAAWA,CAACC,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAME,YAAY,GAAGF,KAAK,CAACA,KAAK,YAAYG,UAAU,GACpD,sBAAsBH,KAAK,CAACA,KAAK,CAACI,OAAO,EAAE,GAC3C,sBAAsBJ,KAAK,CAACK,MAAM,MAAML,KAAK,CAACI,OAAO,EAAE;IACzD,OAAOZ,UAAU,CAACU,YAAY,CAAC;EACjC;EAGAI,kBAAkBA,CAACC,UAAe;IAChCN,OAAO,CAACO,GAAG,CAACD,UAAU,CAAC;IACvB,IAAIE,UAAU,GAAG,IAAIlB,WAAW,CAAC;MAC/B,eAAe,EAAC,SAAS,GAAEmB,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD,CAAC;IACFV,OAAO,CAACO,GAAG,CAACE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1C,IAAIC,aAAa,GAAG;MAACC,OAAO,EAACJ;IAAU,CAAC;IACxC,OAAO,IAAI,CAACb,IAAI,CAACkB,IAAI,CAAC,GAAG,IAAI,CAACjB,MAAM,sBAAsB,EAACU,UAAU,EAACK,aAAa,CAAC;EACtF;EAEAG,oBAAoBA,CAACC,YAAiB;IACpC,MAAMC,WAAW,GAAG;MAClBJ,OAAO,EAAE,IAAItB,WAAW,CAAC;QACvB,eAAe,EAAE,SAAS,GAAGmB,YAAY,CAACC,OAAO,CAAC,OAAO;OAC1D;KACF;IACD,OAAO,IAAI,CAACf,IAAI,CAACkB,IAAI,CAAC,GAAG,IAAI,CAACjB,MAAM,oBAAoB,EAAEmB,YAAY,EAAEC,WAAW,CAAC,CACjFC,IAAI,CACHzB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAC7B;EACL;EAOAoB,iBAAiBA,CAAA;IACflB,OAAO,CAACO,GAAG,CAAC,uBAAuB,CAAC;IACpC,OAAO,IAAI,CAACZ,IAAI,CAACwB,GAAG,CAAoB,GAAG,IAAI,CAACvB,MAAM,aAAa,CAAC,CAEjEqB,IAAI,CACHzB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAC7B;EACL;EAEAsB,aAAaA,CAACC,YAAqB;IACjC,OAAO,IAAI,CAAC1B,IAAI,CAACwB,GAAG,CAAM,GAAG,IAAI,CAACvB,MAAM,eAAeyB,YAAY,EAAE,CAAC;EACxE;EAEAC,cAAcA,CAACD,YAAoB;IACjC,OAAO,IAAI,CAAC1B,IAAI,CAACwB,GAAG,CAAQ,GAAG,IAAI,CAACvB,MAAM,IAAIyB,YAAY,WAAW,CAAC;EACxE;EAEAE,wBAAwBA,CAACF,YAAoB;IAC3C,OAAO,IAAI,CAAC1B,IAAI,CAACwB,GAAG,CAAQ,GAAG,IAAI,CAACvB,MAAM,eAAeyB,YAAY,WAAW,CAAC,CAC9EJ,IAAI,CACHzB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAC7B;EACL;EAEA0B,eAAeA,CAACC,MAAc;IAC5B,OAAO,IAAI,CAAC9B,IAAI,CAACwB,GAAG,CAAQ,GAAG,IAAI,CAACvB,MAAM,aAAa6B,MAAM,EAAE,CAAC,CAC7DR,IAAI,CACHzB,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAC7B;EACL;EAAC,QAAA4B,CAAA,G;qBAtEUjC,iBAAiB,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBtC,iBAAiB;IAAAuC,OAAA,EAAjBvC,iBAAiB,CAAAwC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}