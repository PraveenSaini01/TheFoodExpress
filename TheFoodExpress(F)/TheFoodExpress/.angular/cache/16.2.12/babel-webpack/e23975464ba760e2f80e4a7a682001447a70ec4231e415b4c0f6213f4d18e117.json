{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:9000/api/v3';\n  }\n  handleError(error) {\n    let errorMessage = 'Unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      errorMessage = `Server-side error: ${error.status} - ${error.error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n  registerRestaurant(restaurant) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n      })\n    };\n    return this.http.post(`${this.apiUrl}/restaurant/register`, restaurant, httpOptions).pipe(catchError(this.handleError));\n  }\n  registerFoodMenuItem(foodMenuItem) {\n    return this.http.post(`${this.apiUrl}/foodMenu/register`, foodMenuItem).pipe(catchError(this.handleError));\n  }\n  getAllRestaurants() {\n    return this.http.get(`${this.apiUrl}/restaurant`).pipe(catchError(this.handleError));\n  }\n  getRestaurant(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}`).pipe(catchError(this.handleError));\n  }\n  getFoodListForRestaurant(restaurantId) {\n    return this.http.get(`${this.apiUrl}/${restaurantId}/foods`).pipe(catchError(this.handleError));\n  }\n  getAllFoodMenu(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}/foodMenu`).pipe(catchError(this.handleError));\n  }\n  getFoodMenuById(itemId) {\n    return this.http.get(`${this.apiUrl}/foodMenu/${itemId}`).pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function RestaurantService_Factory(t) {\n    return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestaurantService,\n    factory: RestaurantService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","RestaurantService","constructor","http","apiUrl","handleError","error","errorMessage","ErrorEvent","message","status","console","registerRestaurant","restaurant","httpOptions","headers","localStorage","getItem","post","pipe","registerFoodMenuItem","foodMenuItem","getAllRestaurants","get","getRestaurant","restaurantId","getFoodListForRestaurant","getAllFoodMenu","getFoodMenuById","itemId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\service\\restaurant.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Restaurant } from '../model/restaurant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n  [x: string]: any;\n  private apiUrl = 'http://localhost:9000/api/v3';\n\n  constructor(private http: HttpClient) { }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'Unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      errorMessage = `Server-side error: ${error.status} - ${error.error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n\n  registerRestaurant(restaurant: any): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\n      })\n    };\n    return this.http.post(`${this.apiUrl}/restaurant/register`, restaurant, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  registerFoodMenuItem(foodMenuItem: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/foodMenu/register`, foodMenuItem)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getAllRestaurants(): Observable<Array<Restaurant>> {\n    return this.http.get<Array<Restaurant>>(`${this.apiUrl}/restaurant`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getRestaurant(restaurantId?: string): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/restaurant/${restaurantId}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getFoodListForRestaurant(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/${restaurantId}/foods`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getAllFoodMenu(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/restaurant/${restaurantId}/foodMenu`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getFoodMenuById(itemId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/foodMenu/${itemId}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}