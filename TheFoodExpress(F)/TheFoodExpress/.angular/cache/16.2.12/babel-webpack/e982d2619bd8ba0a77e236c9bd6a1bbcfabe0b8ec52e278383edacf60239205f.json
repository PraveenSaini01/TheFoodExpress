{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./token-interceptor.service\";\nexport class AuthService {\n  constructor(http, tokenService) {\n    this.http = http;\n    this.tokenService = tokenService;\n    this.isAuthenticated = false;\n    this.userEmailSubject = new BehaviorSubject(null);\n    this.userEmail$ = this.userEmailSubject.asObservable();\n    // Initialize the userEmail upon service instantiation\n    this.userEmailSubject.next(this.tokenService.getUserEmail());\n  }\n  saveUser(userDetails) {\n    console.log(\"inside auth services\");\n    return this.http.post(`http://localhost:9000/api/v1/save `, userDetails, {\n      observe: 'response',\n      withCredentials: true\n    });\n  }\n  loginUser(user) {\n    return this.http.post(`http://localhost:9000/api/v1/login`, user, {\n      responseType: 'text',\n      withCredentials: true\n    }).pipe(tap(response => {\n      this.isAuthenticated = true;\n      this.userEmailSubject.next(this.tokenService.getUserEmail());\n    }));\n  }\n  logout() {\n    this.isAuthenticated = false;\n    this.userEmailSubject.next(null); // Set userEmail to null during logout\n  }\n\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  getUserEmail() {\n    return this.userEmailSubject.value;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenInterceptorService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","tokenService","isAuthenticated","userEmailSubject","userEmail$","asObservable","next","getUserEmail","saveUser","userDetails","console","log","post","observe","withCredentials","loginUser","user","responseType","pipe","response","logout","isAuthenticatedUser","value","_","i0","ɵɵinject","i1","HttpClient","i2","TokenInterceptorService","_2","factory","ɵfac","providedIn"],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\service\\auth.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { TokenInterceptorService } from './token-interceptor.service';\n// import { switchMap, tap } from 'rxjs/operators';\n// import { of } from 'rxjs';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n//   private isAuthenticated = false;\n//   public userEmail: string | null = null; // Change this to public\n\n//   constructor(private http: HttpClient, private tokenService: TokenInterceptorService) { }\n\n//   saveUser(userDetails: any) {\n//     console.log(\"inside auth services\")\n//     return this.http.post(`http://localhost:9000/api/v1/save `, userDetails, {\n//       observe: 'response', withCredentials: true\n//     });\n//   }\n\n//   loginUser(user: any) {\n//     this.isAuthenticated = true;\n//     this.userEmail = this.tokenService.getUserEmail();\n\n//     return this.http.post(`http://localhost:9000/api/v1/login`, user, { responseType: 'text', withCredentials: true });\n//   }\n\n\n\n//   logout() {\n//     this.isAuthenticated = false;\n//     this.userEmail = null;\n//   }\n\n//   isAuthenticatedUser() {\n//     return this.isAuthenticated;\n//   }\n\n//   getUserEmail() {\n//     return this.userEmail;\n\n//   }\n// }\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { TokenInterceptorService } from './token-interceptor.service';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isAuthenticated = false;\n  private userEmailSubject = new BehaviorSubject<string | null>(null);\n  public userEmail$: Observable<string | null> = this.userEmailSubject.asObservable();\n\n  constructor(private http: HttpClient, private tokenService: TokenInterceptorService) {\n    // Initialize the userEmail upon service instantiation\n    this.userEmailSubject.next(this.tokenService.getUserEmail());\n  }\n\n  saveUser(userDetails: any): Observable<any> {\n    console.log(\"inside auth services\");\n    return this.http.post(`http://localhost:9000/api/v1/save `, userDetails, {\n      observe: 'response', withCredentials: true\n    });\n  }\n\n  loginUser(user: any): Observable<string> {\n    return this.http.post(`http://localhost:9000/api/v1/login`, user, { responseType: 'text', withCredentials: true })\n      .pipe(\n        tap(response => {\n          this.isAuthenticated = true;\n          this.userEmailSubject.next(this.tokenService.getUserEmail());\n        })\n      );\n  }\n\n  logout() {\n    this.isAuthenticated = false;\n    this.userEmailSubject.next(null);  // Set userEmail to null during logout\n  }\n\n  isAuthenticatedUser(): boolean {\n    return this.isAuthenticated;\n  }\n\n  getUserEmail(): string | null {\n    return this.userEmailSubject.value;\n  }\n}\n\n\n"],"mappings":"AAkDA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,YAAqC;IAA/D,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,YAAY,GAAZA,YAAY;IAJlD,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,gBAAgB,GAAG,IAAIP,eAAe,CAAgB,IAAI,CAAC;IAC5D,KAAAQ,UAAU,GAA8B,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;IAGjF;IACA,IAAI,CAACF,gBAAgB,CAACG,IAAI,CAAC,IAAI,CAACL,YAAY,CAACM,YAAY,EAAE,CAAC;EAC9D;EAEAC,QAAQA,CAACC,WAAgB;IACvBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,oCAAoC,EAAEH,WAAW,EAAE;MACvEI,OAAO,EAAE,UAAU;MAAEC,eAAe,EAAE;KACvC,CAAC;EACJ;EAEAC,SAASA,CAACC,IAAS;IACjB,OAAO,IAAI,CAAChB,IAAI,CAACY,IAAI,CAAC,oCAAoC,EAAEI,IAAI,EAAE;MAAEC,YAAY,EAAE,MAAM;MAAEH,eAAe,EAAE;IAAI,CAAE,CAAC,CAC/GI,IAAI,CACHrB,GAAG,CAACsB,QAAQ,IAAG;MACb,IAAI,CAACjB,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACC,gBAAgB,CAACG,IAAI,CAAC,IAAI,CAACL,YAAY,CAACM,YAAY,EAAE,CAAC;IAC9D,CAAC,CAAC,CACH;EACL;EAEAa,MAAMA,CAAA;IACJ,IAAI,CAAClB,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,gBAAgB,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE;EACrC;;EAEAe,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACnB,eAAe;EAC7B;EAEAK,YAAYA,CAAA;IACV,OAAO,IAAI,CAACJ,gBAAgB,CAACmB,KAAK;EACpC;EAAC,QAAAC,CAAA,G;qBAtCUzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,uBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXhC,WAAW;IAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}