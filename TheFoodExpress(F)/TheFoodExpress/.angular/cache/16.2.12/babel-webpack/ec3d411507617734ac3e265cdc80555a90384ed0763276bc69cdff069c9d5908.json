{"ast":null,"code":"import { switchMap, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./token-interceptor.service\";\nexport class AuthService {\n  constructor(http, tokenService) {\n    this.http = http;\n    this.tokenService = tokenService;\n    this.isAuthenticated = false;\n    this.userEmail = null; // Change this to public\n  }\n\n  saveUser(userDetails) {\n    console.log(\"inside auth services\");\n    return this.http.post(`http://localhost:9000/api/v1/save `, userDetails, {\n      observe: 'response',\n      withCredentials: true\n    });\n  }\n  // loginUser(user: any) {\n  //   this.isAuthenticated = true;\n  //   this.userEmail = this.tokenService.getUserEmail();\n  //   return this.http.post(`http://localhost:9000/api/v1/login`, user, { responseType: 'text', withCredentials: true });\n  // }\n  loginUser(user) {\n    return this.http.post(`http://localhost:9000/api/v1/login`, user, {\n      responseType: 'text',\n      withCredentials: true\n    }).pipe(switchMap(response => {\n      this.isAuthenticated = true;\n      this.userEmail = this.tokenService.getUserEmail();\n      return of(response); // Return the original response\n    }), tap(response => {\n      // Additional side effects if needed\n    }));\n  }\n  logout() {\n    this.isAuthenticated = false;\n    this.userEmail = null;\n  }\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  getUserEmail() {\n    return this.userEmail;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenInterceptorService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["switchMap","tap","of","AuthService","constructor","http","tokenService","isAuthenticated","userEmail","saveUser","userDetails","console","log","post","observe","withCredentials","loginUser","user","responseType","pipe","response","getUserEmail","logout","isAuthenticatedUser","_","i0","ɵɵinject","i1","HttpClient","i2","TokenInterceptorService","_2","factory","ɵfac","providedIn"],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { TokenInterceptorService } from './token-interceptor.service';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isAuthenticated = false;\n  public userEmail: string | null = null; // Change this to public\n\n  constructor(private http: HttpClient, private tokenService: TokenInterceptorService) { }\n\n  saveUser(userDetails: any) {\n    console.log(\"inside auth services\")\n    return this.http.post(`http://localhost:9000/api/v1/save `, userDetails, {\n      observe: 'response', withCredentials: true\n    });\n  }\n\n  // loginUser(user: any) {\n  //   this.isAuthenticated = true;\n  //   this.userEmail = this.tokenService.getUserEmail();\n\n  //   return this.http.post(`http://localhost:9000/api/v1/login`, user, { responseType: 'text', withCredentials: true });\n  // }\n\n  loginUser(user: any) {\n    return this.http.post(`http://localhost:9000/api/v1/login`, user, { responseType: 'text', withCredentials: true })\n      .pipe(\n        switchMap(response => {\n          this.isAuthenticated = true;\n          this.userEmail = this.tokenService.getUserEmail();\n          return of(response); // Return the original response\n        }),\n        tap(response => {\n          // Additional side effects if needed\n        })\n      );\n  }\n\n\n  logout() {\n    this.isAuthenticated = false;\n    this.userEmail = null;\n  }\n\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n\n  getUserEmail() {\n    return this.userEmail;\n\n  }\n}\n"],"mappings":"AAGA,SAASA,SAAS,EAAEC,GAAG,QAAQ,gBAAgB;AAC/C,SAASC,EAAE,QAAQ,MAAM;;;;AAKzB,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,YAAqC;IAA/D,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,YAAY,GAAZA,YAAY;IAHlD,KAAAC,eAAe,GAAG,KAAK;IACxB,KAAAC,SAAS,GAAkB,IAAI,CAAC,CAAC;EAE+C;;EAEvFC,QAAQA,CAACC,WAAgB;IACvBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,oCAAoC,EAAEH,WAAW,EAAE;MACvEI,OAAO,EAAE,UAAU;MAAEC,eAAe,EAAE;KACvC,CAAC;EACJ;EAEA;EACA;EACA;EAEA;EACA;EAEAC,SAASA,CAACC,IAAS;IACjB,OAAO,IAAI,CAACZ,IAAI,CAACQ,IAAI,CAAC,oCAAoC,EAAEI,IAAI,EAAE;MAAEC,YAAY,EAAE,MAAM;MAAEH,eAAe,EAAE;IAAI,CAAE,CAAC,CAC/GI,IAAI,CACHnB,SAAS,CAACoB,QAAQ,IAAG;MACnB,IAAI,CAACb,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,YAAY,CAACe,YAAY,EAAE;MACjD,OAAOnB,EAAE,CAACkB,QAAQ,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,EACFnB,GAAG,CAACmB,QAAQ,IAAG;MACb;IAAA,CACD,CAAC,CACH;EACL;EAGAE,MAAMA,CAAA;IACJ,IAAI,CAACf,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,SAAS,GAAG,IAAI;EACvB;EAEAe,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAAChB,eAAe;EAC7B;EAEAc,YAAYA,CAAA;IACV,OAAO,IAAI,CAACb,SAAS;EAEvB;EAAC,QAAAgB,CAAA,G;qBA/CUrB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,uBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX5B,WAAW;IAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}