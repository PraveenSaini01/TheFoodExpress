{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n    this.userEmail = '';\n  }\n  saveUser(userDetails) {\n    console.log(\"inside auth services\");\n    return this.http.post(`http://localhost:9000/api/v1/save`, userDetails, {\n      observe: 'response',\n      withCredentials: true\n    });\n  }\n  loginUser(user) {\n    return this.http.post(`http://localhost:9000/api/v1/login`, user, {\n      withCredentials: true\n    }).subscribe(response => {\n      this.isAuthenticated = true;\n      this.userEmail = response.email; // Assuming email is part of the response\n    });\n  }\n\n  logout() {\n    this.isAuthenticated = false;\n    // You may want to add an API call to your server for proper logout handling\n  }\n\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  getUserEmailPrefix() {\n    return this.isAuthenticated ? this.userEmail.split('@')[0] : '';\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","isAuthenticated","userEmail","saveUser","userDetails","console","log","post","observe","withCredentials","loginUser","user","subscribe","response","email","logout","isAuthenticatedUser","getUserEmailPrefix","split","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\service\\auth.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n\n\n//   constructor(private http:HttpClient) { }\n//   saveUser(userDetails: any) {\n//     console.log(\"inside auth services\")\n//     return this.http.post(`http://localhost:9000/api/v1/save `, userDetails, {\n//       observe: 'response', withCredentials: true  // withCredentials: true => mean browser can stored data inside the cookies related to thise request\n//     });\n//   }\n\n//   loginUser(user: any) {\n//     this.isAuthenticated = true;\n//     return this.http.post(`http://localhost:9000/api/v1/login`, user, { responseType: 'text', withCredentials: true });\n//   }\n//   private isAuthenticated = false;\n\n\n//   logout() {\n//     this.isAuthenticated = false;\n//   }\n\n//   isAuthenticatedUser() {\n//     return this.isAuthenticated;\n//   }\n// }\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private isAuthenticated = false;\n  private userEmail: string = '';\n\n  constructor(private http: HttpClient) { }\n\n  saveUser(userDetails: any) {\n    console.log(\"inside auth services\");\n    return this.http.post(`http://localhost:9000/api/v1/save`, userDetails, {\n      observe: 'response',\n      withCredentials: true\n    });\n  }\n\n  loginUser(user: any) {\n    return this.http.post(`http://localhost:9000/api/v1/login`, user, { withCredentials: true })\n      .subscribe((response: any) => {\n        this.isAuthenticated = true;\n        this.userEmail = response.email; // Assuming email is part of the response\n      });\n  }\n\n  logout() {\n    this.isAuthenticated = false;\n    // You may want to add an API call to your server for proper logout handling\n  }\n\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n\n  getUserEmailPrefix(): string {\n    return this.isAuthenticated ? this.userEmail.split('@')[0] : '';\n  }\n}\n"],"mappings":";;AAwCA,OAAM,MAAOA,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,SAAS,GAAW,EAAE;EAEU;EAExCC,QAAQA,CAACC,WAAgB;IACvBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,mCAAmC,EAAEH,WAAW,EAAE;MACtEI,OAAO,EAAE,UAAU;MACnBC,eAAe,EAAE;KAClB,CAAC;EACJ;EAEAC,SAASA,CAACC,IAAS;IACjB,OAAO,IAAI,CAACX,IAAI,CAACO,IAAI,CAAC,oCAAoC,EAAEI,IAAI,EAAE;MAAEF,eAAe,EAAE;IAAI,CAAE,CAAC,CACzFG,SAAS,CAAEC,QAAa,IAAI;MAC3B,IAAI,CAACZ,eAAe,GAAG,IAAI;MAC3B,IAAI,CAACC,SAAS,GAAGW,QAAQ,CAACC,KAAK,CAAC,CAAC;IACnC,CAAC,CAAC;EACN;;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACd,eAAe,GAAG,KAAK;IAC5B;EACF;;EAEAe,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACf,eAAe;EAC7B;EAEAgB,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAAChB,eAAe,GAAG,IAAI,CAACC,SAAS,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;EACjE;EAAC,QAAAC,CAAA,G;qBAlCUrB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}