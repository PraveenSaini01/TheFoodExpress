{"ast":null,"code":"// import { EventEmitter, Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Observable, pipe, throwError } from 'rxjs';\n// import { catchError } from 'rxjs/operators';\n// import { Restaurant } from '../model/restaurant';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class RestaurantService {\n//   private apiUrl = 'http://localhost:9000/api/v3';\n//   updated:EventEmitter<boolean>=new EventEmitter();\n//   constructor(private http: HttpClient) { }\n//   private handleError(error: any): Observable<never> {\n//     console.error('An error occurred:', error);\n//     const errorMessage = error.error instanceof ErrorEvent ?\n//       `Client-side error: ${error.error.message}` :\n//       `Server-side error: ${error.status} - ${error.message}`;\n//     return throwError(errorMessage);\n//   }\n//   registerRestaurant(restaurant: any) {\n//     console.log(restaurant)\n//     let httpHeader = new HttpHeaders({\n//       'Authorization':'Bearer ' +localStorage.getItem(\"token\")\n//     });\n//     console.log(localStorage.getItem(\"token\"));\n//     let requestOption = {headers:httpHeader}\n//     return this.http.post(`${this.apiUrl}/restaurant/register`,restaurant,requestOption);\n//   }\n//   getAllRestaurants(): Observable<Array<Restaurant>> {\n//     console.log(\"in restaurant service\")\n//     return this.http.get<Array<Restaurant>>(`${this.apiUrl}/restaurant`)\n//       .pipe(\n//         catchError(this.handleError)\n//       );\n//   }\n//   getRestaurant(restaurantId?: string): Observable<any> {\n//     return this.http.get<any>(`${this.apiUrl}/restaurant/${restaurantId}`);\n//   }\n//   getFoodsForRestaurantId(restaurantId: string): Observable<any[]> {\n//     return this.http.get<any[]>(`${this.apiUrl}/${restaurantId}/foods`);\n//   }\n//   getAllFoodMenu(restaurantId: string): Observable<any[]> {\n//     return this.http.get<any[]>(`${this.apiUrl}/restaurant/${restaurantId}/foodmenu`)\n//       .pipe(\n//         catchError(this.handleError)\n//       );\n//   }\n//   getFoodMenuById(itemId: number): Observable<any[]> {\n//     return this.http.get<any[]>(`${this.apiUrl}/foodmenu/${itemId}`)\n//       .pipe(\n//         catchError(this.handleError)\n//       );\n//   }\n// }\nimport { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:9000/api/v3';\n    this.updated = new EventEmitter();\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    const errorMessage = error.error instanceof ErrorEvent ? `Client-side error: ${error.error.message}` : `Server-side error: ${error.status} - ${error.message}`;\n    return throwError(errorMessage);\n  }\n  registerRestaurant(restaurant) {\n    const httpHeader = new HttpHeaders({\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    });\n    const requestOptions = {\n      headers: httpHeader\n    };\n    return this.http.post(`${this.apiUrl}/restaurant/register`, restaurant, requestOptions);\n  }\n  getAllRestaurants() {\n    return this.http.get(`${this.apiUrl}/restaurant`).pipe(catchError(this.handleError));\n  }\n  getRestaurant(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}`);\n  }\n  getFoodsForRestaurantId(restaurantId) {\n    return this.http.get(`${this.apiUrl}/${restaurantId}/foodMenu`);\n  }\n  getAllFoodMenu(restaurantId) {\n    return this.http.get(`${this.apiUrl}/restaurant/${restaurantId}/foodmenu`).pipe(catchError(this.handleError));\n  }\n  getFoodMenuById(itemId) {\n    return this.http.get(`${this.apiUrl}/foodmenu/${itemId}`).pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function RestaurantService_Factory(t) {\n    return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestaurantService,\n    factory: RestaurantService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EventEmitter","HttpHeaders","throwError","catchError","RestaurantService","constructor","http","apiUrl","updated","handleError","error","console","errorMessage","ErrorEvent","message","status","registerRestaurant","restaurant","httpHeader","Authorization","localStorage","getItem","requestOptions","headers","post","getAllRestaurants","get","pipe","getRestaurant","restaurantId","getFoodsForRestaurantId","getAllFoodMenu","getFoodMenuById","itemId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\service\\restaurant.service.ts"],"sourcesContent":["\n// import { EventEmitter, Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Observable, pipe, throwError } from 'rxjs';\n// import { catchError } from 'rxjs/operators';\n// import { Restaurant } from '../model/restaurant';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class RestaurantService {\n//   private apiUrl = 'http://localhost:9000/api/v3';\n//   updated:EventEmitter<boolean>=new EventEmitter();\n//   constructor(private http: HttpClient) { }\n\n//   private handleError(error: any): Observable<never> {\n//     console.error('An error occurred:', error);\n//     const errorMessage = error.error instanceof ErrorEvent ?\n//       `Client-side error: ${error.error.message}` :\n//       `Server-side error: ${error.status} - ${error.message}`;\n//     return throwError(errorMessage);\n//   }\n\n\n//   registerRestaurant(restaurant: any) {\n//     console.log(restaurant)\n//     let httpHeader = new HttpHeaders({\n//       'Authorization':'Bearer ' +localStorage.getItem(\"token\")\n//     });\n//     console.log(localStorage.getItem(\"token\"));\n//     let requestOption = {headers:httpHeader}\n//     return this.http.post(`${this.apiUrl}/restaurant/register`,restaurant,requestOption);\n//   }\n\n//   getAllRestaurants(): Observable<Array<Restaurant>> {\n//     console.log(\"in restaurant service\")\n//     return this.http.get<Array<Restaurant>>(`${this.apiUrl}/restaurant`)\n\n//       .pipe(\n//         catchError(this.handleError)\n//       );\n//   }\n\n//   getRestaurant(restaurantId?: string): Observable<any> {\n//     return this.http.get<any>(`${this.apiUrl}/restaurant/${restaurantId}`);\n//   }\n\n//   getFoodsForRestaurantId(restaurantId: string): Observable<any[]> {\n//     return this.http.get<any[]>(`${this.apiUrl}/${restaurantId}/foods`);\n//   }\n\n//   getAllFoodMenu(restaurantId: string): Observable<any[]> {\n//     return this.http.get<any[]>(`${this.apiUrl}/restaurant/${restaurantId}/foodmenu`)\n//       .pipe(\n//         catchError(this.handleError)\n//       );\n//   }\n\n//   getFoodMenuById(itemId: number): Observable<any[]> {\n//     return this.http.get<any[]>(`${this.apiUrl}/foodmenu/${itemId}`)\n//       .pipe(\n//         catchError(this.handleError)\n//       );\n//   }\n// }\n\n\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Restaurant } from '../model/restaurant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n  private apiUrl = 'http://localhost:9000/api/v3';\n  updated: EventEmitter<boolean> = new EventEmitter();\n\n  constructor(private http: HttpClient) {}\n\n  private handleError(error: any): Observable<never> {\n    console.error('An error occurred:', error);\n\n    const errorMessage =\n      error.error instanceof ErrorEvent\n        ? `Client-side error: ${error.error.message}`\n        : `Server-side error: ${error.status} - ${error.message}`;\n\n    return throwError(errorMessage);\n  }\n\n  registerRestaurant(restaurant: any): Observable<any> {\n    const httpHeader = new HttpHeaders({\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    });\n    const requestOptions = { headers: httpHeader };\n    return this.http.post(`${this.apiUrl}/restaurant/register`, restaurant, requestOptions);\n  }\n\n  getAllRestaurants(): Observable<Array<Restaurant>> {\n    return this.http.get<Array<Restaurant>>(`${this.apiUrl}/restaurant`).pipe(catchError(this.handleError));\n  }\n\n  getRestaurant(restaurantId?: string): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/restaurant/${restaurantId}`);\n  }\n\n  getFoodsForRestaurantId(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/${restaurantId}/foodMenu`);\n  }\n\n  getAllFoodMenu(restaurantId: string): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/restaurant/${restaurantId}/foodmenu`).pipe(catchError(this.handleError));\n  }\n\n  getFoodMenuById(itemId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/foodmenu/${itemId}`).pipe(catchError(this.handleError));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}