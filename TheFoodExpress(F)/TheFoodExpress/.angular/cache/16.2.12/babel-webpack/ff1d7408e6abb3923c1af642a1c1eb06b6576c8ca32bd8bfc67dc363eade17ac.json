{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nexport class TokenInterceptorService {\n  constructor() {}\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n    let tokenReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return next.handle(tokenReq);\n  }\n  // getUserName(): string {\n  //   const token = localStorage.getItem('token');\n  //   const decodedToken: { [key: string]: any } = jwtDecode(token);//(npm install jwt-decode )package\n  //   const userName = decodedToken?.['UserName'];\n  //   return userName;\n  // }\n  getRole() {\n    const token = localStorage.getItem('token');\n    const decodedToken = jwtDecode(token);\n    const role = decodedToken?.['role'];\n    return role;\n  }\n  getUserEmail() {\n    const token = localStorage.getItem('token');\n    console.log(token);\n    const decodedToken = jwtDecode(token);\n    const userEmail = decodedToken?.['sub'];\n    console.log(userEmail);\n    return userEmail;\n  }\n  static #_ = this.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["jwtDecode","TokenInterceptorService","constructor","intercept","req","next","token","localStorage","getItem","tokenReq","clone","setHeaders","Authorization","handle","getRole","decodedToken","role","getUserEmail","console","log","userEmail","_","_2","factory","ɵfac","providedIn"],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\service\\token-interceptor.service.ts"],"sourcesContent":["import { HttpInterceptor } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { jwtDecode } from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor() { }\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n\n    let tokenReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return next.handle(tokenReq);\n  }\n\n  // getUserName(): string {\n  //   const token = localStorage.getItem('token');\n  //   const decodedToken: { [key: string]: any } = jwtDecode(token);//(npm install jwt-decode )package\n\n  //   const userName = decodedToken?.['UserName'];\n\n  //   return userName;\n  // }\n\n  getRole():string{\n    const token=localStorage.getItem('token');\n    const decodedToken: { [key: string]: any } = jwtDecode(token);\n    const role=decodedToken?.['role'];\n    return role;\n  }\n\n  getUserEmail():string{\n    const token=localStorage.getItem('token');\n    console.log(token)\n    const decodedToken: { [key: string]: any } = jwtDecode(token);\n    const userEmail=decodedToken?.['sub'];\n    console.log(userEmail)\n    return userEmail;\n  }\n\n}\n"],"mappings":"AAEA,SAASA,SAAS,QAAQ,YAAY;;AAKtC,OAAM,MAAOC,uBAAuB;EAElCC,YAAA,GAAgB;EAChBC,SAASA,CAACC,GAAG,EAAEC,IAAI;IACjB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIC,QAAQ,GAAGL,GAAG,CAACM,KAAK,CAAC;MACvBC,UAAU,EAAE;QACVC,aAAa,EAAE,UAAUN,KAAK;;KAEjC,CAAC;IACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,QAAQ,CAAC;EAC9B;EAEA;EACA;EACA;EAEA;EAEA;EACA;EAEAK,OAAOA,CAAA;IACL,MAAMR,KAAK,GAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,MAAMO,YAAY,GAA2Bf,SAAS,CAACM,KAAK,CAAC;IAC7D,MAAMU,IAAI,GAACD,YAAY,GAAG,MAAM,CAAC;IACjC,OAAOC,IAAI;EACb;EAEAC,YAAYA,CAAA;IACV,MAAMX,KAAK,GAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzCU,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;IAClB,MAAMS,YAAY,GAA2Bf,SAAS,CAACM,KAAK,CAAC;IAC7D,MAAMc,SAAS,GAACL,YAAY,GAAG,KAAK,CAAC;IACrCG,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC;IACtB,OAAOA,SAAS;EAClB;EAAC,QAAAC,CAAA,G;qBArCUpB,uBAAuB;EAAA;EAAA,QAAAqB,EAAA,G;WAAvBrB,uBAAuB;IAAAsB,OAAA,EAAvBtB,uBAAuB,CAAAuB,IAAA;IAAAC,UAAA,EAFtB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}