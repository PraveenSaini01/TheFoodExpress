{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { AuthService } from '../service/auth.service';\n// import { Route, Router } from '@angular/router';\n// import { MatSnackBar } from '@angular/material/snack-bar';\n// import { TokenInterceptorService } from '../service/token-interceptor.service';\n// import { SessionLogService } from '../service/sessionlog.service';\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css'],\n// })\n// export class LoginComponent implements OnInit {\n//   [x: string]: any;\n//   loginForm!: FormGroup;\n//   //isLoggedIn: boolean=false;\n//   responseData:any;\n//   userRole:any;\n//   constructor(private formBuilder: FormBuilder,private authService:AuthService,\n//     private route:Router,private _sanckBar:MatSnackBar,private tokenService:TokenInterceptorService\n//    ) {}\n//   ngOnInit(): void {\n//     this.initLoginForm();\n//   }\n//   initLoginForm(): void {\n//     this.loginForm = this.formBuilder.group({\n//       emailId: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)]],\n//       password: ['', [Validators.required, Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/)]],\n//       // role: ['', Validators.required],\n//     });\n//   }\n//   loginUser(): void {\n//     if (this.loginForm.valid) {\n//         // Call your service to handle registration\n//         console.log(this.loginForm.value)\n//         const userData={\n//           emailId:this.loginForm.value.emailId,\n//           password:this.loginForm.value.password\n//         }\n//         this.authService.loginUser(userData).subscribe({\n//          next:response => {\n//             console.log(response)\n//            if(response){\n//             localStorage.setItem('token',response);\n//             const email = this.tokenService.getUserEmail();\n//             console.log(email);\n//             if(email===\"admin@gmail.com\" ){\n//               console.log(\"if\");\n//               this.route.navigateByUrl('/admin');\n//               this.authService.isAuthenticatedUser();\n//             }else{\n//               console.log(\"else\");\n//               this.authService.isAuthenticatedUser();\n//             this.route.navigateByUrl(\"/restaurent-list\");\n//             }\n//             this._sanckBar.open('Logged In successfully.....', 'success', {\n//               duration: 3000,\n//               panelClass: ['mat-toolbar', 'mat-primary']\n//             });\n//           }},\n//           error:(err) => {\n//             console.error('Error during login:', err);\n//           }\n//     });\n//       }\n//   }\n// }","map":{"version":3,"names":[],"sources":["E:\\New folder (2)\\TheFoodExpress\\TheFoodExpress\\src\\app\\login\\login.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { AuthService } from '../service/auth.service';\n// import { Route, Router } from '@angular/router';\n// import { MatSnackBar } from '@angular/material/snack-bar';\n// import { TokenInterceptorService } from '../service/token-interceptor.service';\n// import { SessionLogService } from '../service/sessionlog.service';\n\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css'],\n// })\n// export class LoginComponent implements OnInit {\n//   [x: string]: any;\n\n//   loginForm!: FormGroup;\n//   //isLoggedIn: boolean=false;\n\n//   responseData:any;\n//   userRole:any;\n\n//   constructor(private formBuilder: FormBuilder,private authService:AuthService,\n//     private route:Router,private _sanckBar:MatSnackBar,private tokenService:TokenInterceptorService\n//    ) {}\n\n//   ngOnInit(): void {\n//     this.initLoginForm();\n//   }\n\n//   initLoginForm(): void {\n//     this.loginForm = this.formBuilder.group({\n//       emailId: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)]],\n//       password: ['', [Validators.required, Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/)]],\n//       // role: ['', Validators.required],\n//     });\n//   }\n\n\n//   loginUser(): void {\n//     if (this.loginForm.valid) {\n\n//         // Call your service to handle registration\n//         console.log(this.loginForm.value)\n//         const userData={\n//           emailId:this.loginForm.value.emailId,\n//           password:this.loginForm.value.password\n//         }\n//         this.authService.loginUser(userData).subscribe({\n//          next:response => {\n//             console.log(response)\n//            if(response){\n//             localStorage.setItem('token',response);\n\n//             const email = this.tokenService.getUserEmail();\n//             console.log(email);\n\n//             if(email===\"admin@gmail.com\" ){\n//               console.log(\"if\");\n//               this.route.navigateByUrl('/admin');\n//               this.authService.isAuthenticatedUser();\n\n//             }else{\n//               console.log(\"else\");\n//               this.authService.isAuthenticatedUser();\n//             this.route.navigateByUrl(\"/restaurent-list\");\n//             }\n\n//             this._sanckBar.open('Logged In successfully.....', 'success', {\n//               duration: 3000,\n//               panelClass: ['mat-toolbar', 'mat-primary']\n//             });\n//           }},\n//           error:(err) => {\n//             console.error('Error during login:', err);\n//           }\n//     });\n//       }\n//   }\n\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"script","externalDependencies":[]}